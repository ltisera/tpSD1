# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comentarios_pb2 as comentarios__pb2


class servicioComentariosStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.crearComentario = channel.unary_unary(
                '/servicioComentarios/crearComentario',
                request_serializer=comentarios__pb2.crearComentarioRequest.SerializeToString,
                response_deserializer=comentarios__pb2.comentarioStatus.FromString,
                )
        self.eliminarComentario = channel.unary_unary(
                '/servicioComentarios/eliminarComentario',
                request_serializer=comentarios__pb2.eliminarComentarioRequest.SerializeToString,
                response_deserializer=comentarios__pb2.comentarioStatus.FromString,
                )
        self.obtenerComentarios = channel.unary_unary(
                '/servicioComentarios/obtenerComentarios',
                request_serializer=comentarios__pb2.traerComentariosRequest.SerializeToString,
                response_deserializer=comentarios__pb2.traerComentariosResponse.FromString,
                )


class servicioComentariosServicer(object):
    """Missing associated documentation comment in .proto file."""

    def crearComentario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eliminarComentario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def obtenerComentarios(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_servicioComentariosServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'crearComentario': grpc.unary_unary_rpc_method_handler(
                    servicer.crearComentario,
                    request_deserializer=comentarios__pb2.crearComentarioRequest.FromString,
                    response_serializer=comentarios__pb2.comentarioStatus.SerializeToString,
            ),
            'eliminarComentario': grpc.unary_unary_rpc_method_handler(
                    servicer.eliminarComentario,
                    request_deserializer=comentarios__pb2.eliminarComentarioRequest.FromString,
                    response_serializer=comentarios__pb2.comentarioStatus.SerializeToString,
            ),
            'obtenerComentarios': grpc.unary_unary_rpc_method_handler(
                    servicer.obtenerComentarios,
                    request_deserializer=comentarios__pb2.traerComentariosRequest.FromString,
                    response_serializer=comentarios__pb2.traerComentariosResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'servicioComentarios', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class servicioComentarios(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def crearComentario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servicioComentarios/crearComentario',
            comentarios__pb2.crearComentarioRequest.SerializeToString,
            comentarios__pb2.comentarioStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eliminarComentario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servicioComentarios/eliminarComentario',
            comentarios__pb2.eliminarComentarioRequest.SerializeToString,
            comentarios__pb2.comentarioStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def obtenerComentarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servicioComentarios/obtenerComentarios',
            comentarios__pb2.traerComentariosRequest.SerializeToString,
            comentarios__pb2.traerComentariosResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
